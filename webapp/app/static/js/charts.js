// Generated by CoffeeScript 1.9.0
(function() {
  var BoxPlot, Chart,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  Chart = (function() {
    function Chart(_at_app, _at_params, _at_data, _at_helpers) {
      this.app = _at_app;
      this.params = _at_params;
      this.data = _at_data;
      this.helpers = _at_helpers;
    }

    return Chart;

  })();

  BoxPlot = (function(_super) {
    __extends(BoxPlot, _super);

    function BoxPlot(_at_app, _at_params, _at_data, _at_helpers) {
      var that;
      this.app = _at_app;
      this.params = _at_params;
      this.data = _at_data;
      this.helpers = _at_helpers;
      this.data = this._sortBy(this.data, "median");
      this.el = this.params.el;
      this.scaleX = this._getScaleX();
      this.scaleY = this._getScaleY();
      this.svg = d3.select("#" + this.el).append("svg").attr("width", this.params.width).attr("height", this.params.height);
      this.chart = this.svg.append("g").attr("transform", "translate(" + this.params.margin.left + ", " + this.params.margin.top + ")");
      this.plots = this.chart.selectAll(".plot").data(this.data).enter().append("g").attr("class", "plot").attr("transform", (function(_this) {
        return function(d, i) {
          return "translate(0, " + (_this.scaleY(i)) + ")";
        };
      })(this));
      that = this;
      this.plots.each(function(d, i) {
        d3.select(this).append("rect").attr("width", function(d) {
          return that.scaleX(d.upper) - that.scaleX(d.lower);
        }).attr("height", 3).attr("x", function(d) {
          return that.scaleX(d.lower);
        }).style("fill", "#ccc");
        d3.select(this).append("circle").attr("class", "lower").attr("class", function(d) {
          return that.helpers.aqiColorClass(d.lower);
        }).style("fill", "white").attr("r", 5).attr("cx", function(d) {
          return that.scaleX(d.lower);
        }).attr("cy", function(d, i) {
          return that.scaleY(i) + 1;
        });
        d3.select(this).append("circle").attr("class", "median").attr("class", function(d) {
          return that.helpers.aqiColorClass(d.median);
        }).attr("r", 5).attr("cx", function(d) {
          return that.scaleX(d.median);
        }).attr("cy", function(d, i) {
          return that.scaleY(i) + 1;
        });
        return d3.select(this).append("circle").attr("class", "upper").attr("class", function(d) {
          return that.helpers.aqiColorClass(d.upper);
        }).style("fill", "white").attr("r", 5).attr("cx", function(d) {
          return that.scaleX(d.upper);
        }).attr("cy", function(d, i) {
          return that.scaleY(i) + 1;
        });
      });
    }

    BoxPlot.prototype._getScaleX = function() {
      var domainX, rangeX;
      domainX = this._getDomain(this.data);
      rangeX = [0, this.params.width - (this.params.margin.left + this.params.margin.right)];
      return this.params.scale().domain(domainX).range(rangeX);
    };

    BoxPlot.prototype._getScaleY = function() {
      var domainY, rangeY;
      domainY = [0, this.data.length];
      rangeY = [0, this.params.height - (this.params.margin.top + this.params.margin.bottom)];
      return this.params.scale().domain(domainY).range(rangeY);
    };

    BoxPlot.prototype._sortBy = function(data, dimension) {
      if (dimension == null) {
        dimension = 'median';
      }
      return _.sortBy(data, dimension).reverse();
    };

    BoxPlot.prototype._getDomain = function(data) {
      var max, min;
      max = _.max(_.pluck(data, "upper"));
      min = _.min(_.pluck(data, "lower"));
      return [min, max];
    };

    return BoxPlot;

  })(Chart);

  if (window.APP == null) {
    window.APP = {};
  }

  APP.charts = {
    BoxPlot: BoxPlot
  };

}).call(this);
