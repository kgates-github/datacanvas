// Generated by CoffeeScript 1.9.0
(function() {
  var AreaChart,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  AreaChart = (function(_super) {
    __extends(AreaChart, _super);

    function AreaChart(_at_app, _at_params, _at_data, _at_city, _at_helpers) {
      var self;
      this.app = _at_app;
      this.params = _at_params;
      this.data = _at_data;
      this.city = _at_city;
      this.helpers = _at_helpers;
      self = this;
      this.el = this.params.el;
      this.scaleX = this._getScaleX();
      this.scaleY = this._getScaleY();
      this.qualitative = this.params.qualitative || [];
      this.xAxis = d3.svg.axis().scale(this.scaleX).innerTickSize(6).orient("top");
      this.yAxis = d3.svg.axis().scale(this.scaleY).orient("left");
      this.svg = d3.select("#" + this.el).append("svg").attr("width", this.params.width).attr("height", this.params.height);
      this.tip = d3.tip().attr('class', 'd3-tip').direction('w').offset((function(_this) {
        return function(d) {
          return [-(_this.params.width - _this.params.margin.left) / _this.data.length / 2, -20];
        };
      })(this)).html((function(_this) {
        return function(d) {
          var html, lowerClass, lowerName, maxClass, maxName, medianClass, medianName, minClass, minName, upperClass, upperName;
          minClass = self.helpers.getColorClass(d.min, self.qualitative);
          minName = _.findWhere(self.qualitative, {
            "class": minClass
          }).name;
          lowerClass = self.helpers.getColorClass(d.lower, self.qualitative);
          lowerName = _.findWhere(self.qualitative, {
            "class": lowerClass
          }).name;
          medianClass = self.helpers.getColorClass(d.median, self.qualitative);
          medianName = _.findWhere(self.qualitative, {
            "class": medianClass
          }).name;
          upperClass = self.helpers.getColorClass(d.upper, self.qualitative);
          upperName = _.findWhere(self.qualitative, {
            "class": upperClass
          }).name;
          maxClass = self.helpers.getColorClass(d.max, self.qualitative);
          maxName = _.findWhere(self.qualitative, {
            "class": maxClass
          }).name;
          html = " <div style='text-align:center; margin-bottom:10px; font-size:11px; color:#bbb;'>Air quality index scores</div>\n <div style='text-align:center; margin-top:12px; margin-bottom:10px; color:white; font-size:20px; font-weight: 400;'>\n   " + (moment(d.date).format('MMM D, YYYY')) + "\n </div>\n<hr>\n <table class=\"table borderless\">\n   <tbody>\n     <tr>\n       <td style=\"text-align:right; vertical-align:center;\">\n         <div>Max</div>\n       </td>\n       <td class=\"" + maxClass + "-score\" style=\"font-size:26px; line-height:26px; width:70px; text-align:center;\">\n         " + (d3.round(d.max, self.params.round)) + "\n         <div style=\"font-size:11px;\">" + maxName + "</div></td>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"text-align:right;\">\n         <div>High</div>\n         <div style=\"font-size:11px; color:#bbb;\">75th<br>percentile</div>\n       </td>\n       <td class=\"" + upperClass + "-score\" style=\"font-size:26px; line-height:26px; width:70px; text-align:center;\">\n         " + (d3.round(d.upper, self.params.round)) + "\n         <div style=\"font-size:11px;\">" + upperName + "</div></td>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"text-align:right;\">\n         <div>Average</div>\n         \n       </td>\n       <td class=\"" + medianClass + "-score\" style=\"font-size:26px; line-height:26px; width:70px; text-align:center;\">\n         " + (d3.round(d.median, self.params.round)) + "\n         <div style=\"font-size:11px;\">" + medianName + "</div></td>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"text-align:right;\">\n         <div>Low</div>\n         <div style=\"font-size:11px; color:#bbb;\">25th<br>percentile</div>\n       </td>\n        <td class=\"" + lowerClass + "-score\" style=\"font-size:26px; line-height:26px; width:70px; text-align:center;\">\n         " + (d3.round(d.lower, self.params.round)) + "\n         <div style=\"font-size:11px;\">" + lowerName + "</div></td>\n       </td>\n     </tr>\n     <tr>\n       <td style=\"text-align:right;\">\n         <div>Min</div>\n       </td>\n       <td class=\"" + minClass + "-score\" style=\"font-size:26px; line-height:26px; width:70px; text-align:center;\">\n         " + (d3.round(d.min, self.params.round)) + "\n         <div style=\"font-size:11px;\">" + minName + "</div></td>\n       </td>\n     </tr>\n   </tbody>\n </table>";
          return html;
        };
      })(this));
      this.svg.call(this.tip);
      this.svg.append("g").attr("class", "x axis").attr("transform", "translate(20, " + (this.params.margin.top - 10) + ")").call(this.xAxis);
      this.svg.append("g").attr("class", "y axis").attr("transform", "translate(" + (this.params.margin.left - 1) + ", " + this.params.margin.top + ")").call(this.yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", "0.8em").style("text-anchor", "end").style("font-size", "11px").text(this.params.yAxisLabel);
      this.chart = this.svg.append("g").attr("transform", "translate(" + this.params.margin.left + ", " + this.params.margin.top + ")");
      this.areaMax = d3.svg.area().x((function(_this) {
        return function(d) {
          return _this.scaleX(new Date(d.date));
        };
      })(this)).y0((function(_this) {
        return function(d) {
          return _this.scaleY(d.min);
        };
      })(this)).y1((function(_this) {
        return function(d) {
          return _this.scaleY(d.max);
        };
      })(this));
      this.areaMaxPlot = this.chart.append("path").datum(this.data, function(d) {
        return d.date;
      }).attr("class", "area").style("fill", "#eee").attr("d", this.areaMax);
      this.areaPercentile = d3.svg.area().x((function(_this) {
        return function(d) {
          return _this.scaleX(new Date(d.date));
        };
      })(this)).y0((function(_this) {
        return function(d) {
          return _this.scaleY(d.lower);
        };
      })(this)).y1((function(_this) {
        return function(d) {
          return _this.scaleY(d.upper);
        };
      })(this));
      this.areaPercentilePlot = this.chart.append("path").datum(this.data, function(d) {
        return d.date;
      }).attr("class", "area").style("fill", "#ccc").attr("d", this.areaPercentile);
      this.line = d3.svg.line().x((function(_this) {
        return function(d) {
          return _this.scaleX(new Date(d.date));
        };
      })(this)).y((function(_this) {
        return function(d) {
          return _this.scaleY(d.median);
        };
      })(this));
      this.areaMedianPlot = this.chart.append("path").datum(this.data, function(d) {
        return d.date;
      }).attr("class", "line").attr("d", this.line);
      this.key = this.svg.append("g").attr("id", "area-key").style("display", "none").attr("transform", "translate(" + (this.params.width - 140) + ", " + this.params.margin.top + ")");
      this.key.append("rect").attr("width", 135).attr("height", 140).style("stroke", "#ddd").style("fill", "#fff");
      this.key.append("image").attr("xlink:href", area_key).attr("width", 119).attr("height", 136).attr("x", 10).attr("y", 2).on("click", (function(_this) {
        return function() {
          return _this.key.style("opacity", 0);
        };
      })(this));
      this.chart.selectAll(".overlay").data(this.data, function(d) {
        return d.date;
      }).enter().append("rect").style("fill", "#333").style("opacity", 0.0).attr("class", "overlay").attr("height", this.params.height - (this.params.margin.top + this.params.margin.bottom)).attr("width", this.params.width / this.data.length).attr("x", (function(_this) {
        return function(d) {
          return _this.scaleX(new Date(d.date));
        };
      })(this)).attr("y", 0).on('mouseover', this.tip.show).on('mouseout', this.tip.hide);
      this._setExplanationText();
    }

    AreaChart.prototype._getDomain = function(data) {
      var max, min;
      max = _.max(_.pluck(data, "max"));
      min = _.min(_.pluck(data, "min"));
      return [min, max];
    };

    AreaChart.prototype._getScaleX = function() {
      var domainX, rangeX;
      domainX = d3.extent(this.data, function(d) {
        return d.date;
      });
      rangeX = [0, this.params.width - (this.params.margin.left + this.params.margin.right)];
      return d3.time.scale().range(rangeX).domain([new Date(domainX[0]), new Date(domainX[1])]);
    };

    AreaChart.prototype._getScaleY = function() {
      var domainY, rangeY;
      domainY = this._getDomain(this.data);
      rangeY = [this.params.height - (this.params.margin.top + this.params.margin.bottom), 0];
      return this.params.scaleY().domain(domainY).range(rangeY);
    };

    AreaChart.prototype.update = function(data) {
      var duration;
      duration = 0;
      this.data = data;
      this.scaleX = this._getScaleX();
      this.scaleY = this._getScaleY();
      this.xAxis = d3.svg.axis().scale(this.scaleX).tickSize(-6).orient("top");
      this.yAxis = d3.svg.axis().scale(this.scaleY).orient("left");
      this.areaMax = d3.svg.area().x((function(_this) {
        return function(d) {
          return _this.scaleX(new Date(d.date));
        };
      })(this)).y0((function(_this) {
        return function(d) {
          return _this.scaleY(d.min);
        };
      })(this)).y1((function(_this) {
        return function(d) {
          return _this.scaleY(d.max);
        };
      })(this));
      this.areaPercentile = d3.svg.area().x((function(_this) {
        return function(d) {
          return _this.scaleX(new Date(d.date));
        };
      })(this)).y0((function(_this) {
        return function(d) {
          return _this.scaleY(d.lower);
        };
      })(this)).y1((function(_this) {
        return function(d) {
          return _this.scaleY(d.upper);
        };
      })(this));
      this.line = d3.svg.line().x((function(_this) {
        return function(d) {
          return _this.scaleX(new Date(d.date));
        };
      })(this)).y((function(_this) {
        return function(d) {
          return _this.scaleY(d.median);
        };
      })(this));
      this.areaMaxPlot.datum(this.data, function(d) {
        return d.date;
      }).transition().duration(duration).attr("d", this.areaMax);
      this.areaPercentilePlot.datum(this.data, function(d) {
        return d.date;
      }).transition().duration(duration).attr("d", this.areaPercentile);
      this.areaMedianPlot.datum(this.data, function(d) {
        return d.date;
      }).transition().duration(duration).attr("d", this.line);
      this.chart.selectAll(".overlay").remove();
      this.chart.selectAll(".overlay").data(this.data, function(d) {
        return d.date;
      }).enter().append("rect").style("fill", "#333").style("opacity", 0.0).attr("class", "overlay").attr("height", this.params.height - (this.params.margin.top + this.params.margin.bottom)).attr("width", this.params.width / this.data.length).attr("x", (function(_this) {
        return function(d) {
          return _this.scaleX(new Date(d.date));
        };
      })(this)).attr("y", 0).on('mouseover', this.tip.show).on('mouseout', this.tip.hide);
      this.svg.selectAll("g.x.axis").transition().duration(duration).call(this.xAxis);
      this.svg.selectAll("g.y.axis").transition().duration(duration).call(this.yAxis);
      return this._setExplanationText();
    };

    AreaChart.prototype._setExplanationText = function() {
      var html, monthText, timeOfDayText;
      this.filters = this.app.getFilters();
      monthText = this.filters.monthFilter ? " from " + this.filters.monthFilter + ", 2015" : " between " + this.filters.startMonth + " and " + this.filters.endMonth + ", 2015";
      timeOfDayText = this.filters.timeOfDayFilter != null ? " only using data collected between " + this.filters.timeOfDayFilter : "";
      html = this.city + "'s daily AQi scores " + monthText + timeOfDayText + ".";
      return d3.select("#timeseries-explanation").html(html);
    };

    return AreaChart;

  })(APP.charts['Chart']);

  APP.charts['AreaChart'] = AreaChart;

}).call(this);
