// Generated by CoffeeScript 1.9.0
(function() {
  var BoxPlotVertical,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  BoxPlotVertical = (function(_super) {
    __extends(BoxPlotVertical, _super);

    function BoxPlotVertical(_at_app, _at_params, _at_data, _at_city, _at_helpers) {
      var self;
      this.app = _at_app;
      this.params = _at_params;
      this.data = _at_data;
      this.city = _at_city;
      this.helpers = _at_helpers;
      self = this;
      this.data = _.sortBy(this.data, "median");
      this.el = this.params.el;
      this.scaleX = this._getScaleX();
      this.scaleY = this._getScaleY();
      this.qualitative = this.params.qualitative || [];
      this.xAxis = d3.svg.axis().scale(this.scaleX).tickSize(-6).tickSubdivide(true);
      this.yAxis = d3.svg.axis().scale(this.scaleY).orient("left").ticks(3);
      $("#" + this.params.dimension + "-sort button").on("click", function() {
        self._sortBy($(this).val());
        return self._toggleButtons($(this).val());
      });
      this.svg = d3.select("#" + this.el).append("svg").attr("width", this.params.width).attr("height", this.params.height);
      this.svg.append("g").attr("class", "x axis").attr("transform", ("translate(" + this.params.margin.left + ",") + (this.params.height - 16) + ")").call(this.xAxis);
      this.svg.append("g").attr("class", "y axis").attr("transform", "translate(" + (this.params.margin.left - 1) + ", " + (this.params.margin.top + 8) + ")").call(this.yAxis);
      this.tip = d3.tip().attr('class', 'd3-tip').offset((function(_this) {
        return function(d) {
          return [-20, 0];
        };
      })(this)).html(function(d) {
        var html;
        html = " <div style='text-align:center; margin-bottom:10px; font-size:11px; color:#bbb;'>Temperatures (degrees c)</div>\n <div style='text-align:center; margin-top:12px; margin-bottom:10px; color:white; font-size:20px; font-weight: 400;'>\n   " + (moment(d.date).format('MMM D, YYYY')) + "\n </div>\n<hr>\n <table class=\"table borderless\">\n   <tbody>\n     <tr>\n       <td style=\"text-align:right; vertical-align:center;\">\n         <div>High</div>\n       </td>\n       <td style=\"font-size:26px; line-height:26px; width:70px; text-align:center;\">\n         " + (d3.round(d.max, self.params.round)) + "\n       </td>\n     </tr>\n     <tr>\n       <td style=\"text-align:right;\">\n         <div>Low</div>\n       </td>\n       <td style=\"font-size:26px; line-height:26px; width:70px; text-align:center;\">\n         " + (d3.round(d.min, self.params.round)) + "\n       </td>\n     </tr>\n   </tbody>\n </table>";
        return html;
      });
      this.svg.call(this.tip);
      this.chart = this.svg.append("g").attr("transform", "translate(" + (this.params.margin.left + 2) + ", " + (this.params.margin.top + 8) + ")");
      this.plots = this.chart.selectAll(".plot").data(this.data).enter().append("g").attr("class", "plot").attr("transform", (function(_this) {
        return function(d, i) {
          return "translate(" + (_this.scaleX(new Date(d.date))) + ", 0)";
        };
      })(this));
      this.plots.each(function(d, i) {
        d3.select(this).append("rect").attr("width", (self.params.width - self.params.margin.left - self.params.margin.right) / self.data.length - 2).attr("height", function(d) {
          return self.scaleY(d.min) - self.scaleY(d.max) + 2;
        }).attr("x", 0).attr("y", function(d) {
          return self.params.height - self.scaleY(d.min) - self.params.margin.top - self.params.margin.bottom;
        }).attr("class", "bar").style("fill", "#ddd").on('mouseover', self.tip.show).on('mouseout', self.tip.hide);
        return d3.select(this).append("rect").style("fill", "#none").style("opacity", 0.0).attr("class", "overlay").attr("width", (self.params.width - self.params.margin.left - self.params.margin.right) / self.data.length - 2).attr("height", self.params.height).attr("x", 0).attr("y", function(d) {
          return self.params.height - self.scaleY(d.min) - self.params.margin.top - self.params.margin.bottom - 20;
        }).attr("class", "bar").style("fill", "#ddd").on('mouseover', self.tip.show).on('mouseout', self.tip.hide);
      });
      this.svg.append("text").attr("class", "x label").style("fill", "#999").style("font-weight", "400").attr("text-anchor", "start").attr("x", this.params.margin.left + 6).attr("y", 10).text(this.params.yAxisLabel);
    }

    BoxPlotVertical.prototype._toggleButtons = function(idx) {
      d3.selectAll("#" + this.params.dimension + "-sort button").classed({
        'on': false
      });
      return d3.select("#" + idx).classed({
        'on': true
      });
    };

    BoxPlotVertical.prototype._getScaleX = function() {
      var domainX, rangeX;
      domainX = d3.extent(this.data, function(d) {
        return d.date;
      });
      rangeX = [0, this.params.width - (this.params.margin.left + this.params.margin.right)];
      return d3.time.scale().range(rangeX).domain([new Date(domainX[0]), new Date(domainX[1])]);
    };

    BoxPlotVertical.prototype._getDomain = function(data) {
      var max, min;
      max = _.max(_.pluck(data, "max"));
      min = _.min(_.pluck(data, "min"));
      return [min, max];
    };

    BoxPlotVertical.prototype._getScaleY = function() {
      var domainY, rangeY;
      domainY = this._getDomain(this.data);
      rangeY = [this.params.height - this.params.margin.top - this.params.margin.bottom - 10, 0];
      return this.params.scaleY().domain(domainY).range(rangeY);
    };

    BoxPlotVertical.prototype._sortBy = function(dimension, delay) {
      if (dimension == null) {
        dimension = 'median';
      }
      if (delay == null) {
        delay = 0;
      }
      this.data = _.sortBy(this.data, dimension);
      return this.plots.data(this.data, function(d) {
        return d.city;
      }).transition().delay(function(d, i) {
        return (i * 160) + delay;
      }).duration(330).ease("linear").attr("transform", (function(_this) {
        return function(d, i) {
          return "translate(0, " + (_this.scaleY(i)) + ")";
        };
      })(this));
    };

    BoxPlotVertical.prototype.update = function(data) {
      var duration, self;
      self = this;
      this.data = data;
      this.scaleX = this._getScaleX();
      this.scaleY = this._getScaleY();
      duration = 0;
      this.plots.remove();
      this.plots = this.chart.selectAll(".plot").data(this.data).enter().append("g").attr("class", "plot").attr("transform", (function(_this) {
        return function(d, i) {
          return "translate(" + (_this.scaleX(new Date(d.date))) + ", 0)";
        };
      })(this));
      this.plots.each(function(d, i) {
        d3.select(this).append("rect").attr("width", (self.params.width - self.params.margin.left - self.params.margin.right) / self.data.length - 2).attr("height", function(d) {
          return self.scaleY(d.min) - self.scaleY(d.max) + 2;
        }).attr("x", 0).attr("y", function(d) {
          return self.params.height - self.scaleY(d.min) - self.params.margin.top - self.params.margin.bottom;
        }).attr("class", "bar").style("fill", "#ddd");
        return d3.select(this).append("rect").style("fill", "#none").style("opacity", 0.0).attr("class", "overlay").attr("width", (self.params.width - self.params.margin.left - self.params.margin.right) / self.data.length - 2).attr("height", self.params.height).attr("x", 0).attr("y", function(d) {
          return self.params.height - self.scaleY(d.min) - self.params.margin.top - self.params.margin.bottom - 20;
        }).attr("class", "bar").style("fill", "#ddd").on('mouseover', self.tip.show).on('mouseout', self.tip.hide);
      });
      this.xAxis = d3.svg.axis().scale(this.scaleX).tickSize(-6).tickSubdivide(true);
      this.yAxis = d3.svg.axis().scale(this.scaleY).orient("left").ticks(3);
      this.svg.selectAll("g.x.axis").call(this.xAxis);
      return this.svg.selectAll("g.y.axis").call(this.yAxis);
    };

    return BoxPlotVertical;

  })(APP.charts['Chart']);

  APP.charts['BoxPlotVertical'] = BoxPlotVertical;

}).call(this);
