// Generated by CoffeeScript 1.9.0
(function() {
  var Filter,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  Filter = (function(_super) {
    __extends(Filter, _super);

    function Filter(_at_app, _at_params, _at_data, _at_city, _at_helpers) {
      var self;
      this.app = _at_app;
      this.params = _at_params;
      this.data = _at_data;
      this.city = _at_city;
      this.helpers = _at_helpers;
      self = this;
      this.data = _.sortBy(this.data, "median");
      this.el = this.params.el;
      this.scaleX = this._getScaleX();
      this.scaleY = this._getScaleY();
      this.qualitative = this.params.qualitative || [];
      this.xAxis = d3.svg.axis().scale(this.scaleX).tickSize(-6).tickSubdivide(true);
      this.dataMonthly = _.findWhere(this.data, {
        dimension: this.params.dimension,
        chart: 'monthly'
      });
      this.dataMonthly = this.dataMonthly.data;
      this.buttonsMonthly = d3.select("#" + this.el).append("div").attr("class", "btn-group-vertical");
      this.buttonsMonthly.selectAll("button").data(this.dataMonthly).enter().append("button").attr("type", "button").attr("class", "btn btn-default btn-sm btn-compact").html(function(d) {
        return d.date;
      });

      /*
      <div class="btn-group-vertical" role="group" aria-label="">
          <button type="button" class="btn btn-default btn-sm btn-compact">Jan</button>
          <button type="button" class="btn btn-default btn-sm btn-compact">Feb</button>
          <button type="button" class="btn btn-default btn-sm btn-compact">Mar</button>
      
      
       * X axis
      @svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(#{@params.margin.left}," + (@params.height - 30) + ")")
        .call(@xAxis)
       */
    }

    Filter.prototype._getScaleX = function() {
      var domainX, rangeX;
      domainX = this._getDomain(this.data);
      rangeX = [0, this.params.width - (this.params.margin.left + this.params.margin.right)];
      return this.params.scale().domain(domainX).range(rangeX);
    };

    Filter.prototype._getScaleY = function() {
      var domainY, rangeY;
      domainY = [0, this.data.length];
      rangeY = [0, this.params.height - (this.params.margin.top + this.params.margin.bottom)];
      return d3.scale.linear().domain(domainY).range(rangeY);
    };

    Filter.prototype._getDomain = function(data) {
      var max, min;
      max = _.max(_.pluck(data, "upper"));
      min = _.min(_.pluck(data, "lower"));
      return [min, max];
    };

    Filter.prototype.update = function(data) {
      var self;
      self = this;
      this.data = data;
      return this.scaleX = this._getScaleX();
    };

    return Filter;

  })(APP.charts['Chart']);

  APP.charts['Filter'] = Filter;

}).call(this);
