// Generated by CoffeeScript 1.9.0
(function() {
  var Filter,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  Filter = (function(_super) {
    __extends(Filter, _super);

    Filter.prototype._getDimensionData = function(dimension) {
      if (dimension == null) {
        dimension = 'airquality_raw';
      }
      return _.where(this.data, {
        name: dimension
      });
    };

    function Filter(_at_app, _at_params, _at_data, _at_city, _at_helpers) {
      var combinedData, self;
      this.app = _at_app;
      this.params = _at_params;
      this.data = _at_data;
      this.city = _at_city;
      this.helpers = _at_helpers;
      self = this;
      this.dimension = 'airquality_raw';
      this.workingData = this._getDimensionData(this.dimension);
      this.dataMonthly = _.findWhere(this.workingData, {
        chart: 'month'
      });
      this.dataTime = _.findWhere(this.workingData, {
        chart: 'time_of_day'
      });
      this.el = this.params.el;
      combinedData = this.dataMonthly.data.concat(this.dataTime.data);
      this.scaleX = this._getScaleX(combinedData);
      this.monthFormat = d3.time.format("%b");
      this.dataMonthly = this.dataMonthly.data;
      this.buttonsMonthly = d3.select("#filter-month-buttons").append("div");
      this.buttonsMonthly.selectAll("button").data(this.dataMonthly).enter().append("div").append("button").attr("type", "button").attr("class", "btn btn-default btn-sm btn-compact btn-monthly btn-filter").attr("id", function(d) {
        return "id" + d.time;
      }).attr("value", (function(_this) {
        return function(d) {
          return _this.monthFormat(new Date(d.time));
        };
      })(this)).style("width", "65px").style("margin-bottom", "1px").html((function(_this) {
        return function(d) {
          return _this.monthFormat(new Date(d.time));
        };
      })(this)).on("click", (function(_this) {
        return function(d) {
          return _this._filterCharts(d.time, "btn-monthly");
        };
      })(this));
      this.chartMonthly = d3.select("#filter-month-chart").append("div").style("width", "112px");
      this.barsMonthly = this.chartMonthly.selectAll(".bar").data(this.dataMonthly).enter().append("div").attr("class", "bar").style("height", "17px").style("background", "#ddd").style("margin-bottom", "5px").style("width", (function(_this) {
        return function(d) {
          return (_this.scaleX(d.value)) + "px";
        };
      })(this));
      this.dataTime = this.dataTime.data;
      this.buttonsTime = d3.select("#filter-time-buttons").append("div");
      this.buttonsTime.selectAll("button").data(this.dataTime).enter().append("div").append("button").attr("type", "button").attr("class", "btn btn-default btn-sm btn-compact btn-time btn-filter").attr("id", function(d) {
        return "id" + d.time;
      }).attr("value", function(d) {
        return d.time;
      }).style("width", "65px").style("margin-bottom", "1px").html((function(_this) {
        return function(d) {
          var date, et, st;
          date = "2015-03-02T" + d.time;
          st = moment(date);
          et = moment(st).add(2, "hours");
          return st.format('h') + '-' + et.format('ha');
        };
      })(this)).on("click", (function(_this) {
        return function(d) {
          return _this._filterCharts(d.time + "", "btn-time");
        };
      })(this));
      this.chartMonthly = d3.select("#filter-time-chart").append("div").style("width", "112px");
      this.barsMonthly = this.chartMonthly.selectAll(".bar").data(this.dataTime).enter().append("div").attr("class", "bar").style("height", "17px").style("background", "#ddd").style("margin-bottom", "5px").style("width", (function(_this) {
        return function(d) {
          return (_this.scaleX(d.value)) + "px";
        };
      })(this));
      d3.select("#reset-filters").on("click", (function(_this) {
        return function() {
          return _this._filterCharts(null, null);
        };
      })(this));
    }

    Filter.prototype._filterCharts = function(filter, btnClass) {
      var data, self;
      $("#spinner").show();
      if (filter) {
        d3.selectAll("." + btnClass).classed({
          'on': false
        });
        d3.select("." + btnClass + "#id" + filter).classed({
          'on': true
        });
        data = {
          'month': _.pluck(d3.selectAll(".btn-monthly.on")[0], 'value')[0] || null,
          'time_of_day': _.pluck(d3.selectAll(".btn-time.on")[0], 'value')[0] || null,
          'city': this.city
        };
      } else {
        d3.selectAll(".btn-filter").classed({
          'on': false
        });
        data = {};
      }
      self = this;
      return $.ajax({
        url: "/update/",
        data: data
      }).done(function(data) {
        $("#spinner").hide();
        console.log(data);
        return self.app.update(data);
      });
    };

    Filter.prototype._getScaleX = function(data) {
      var domainX, rangeX;
      domainX = this._getDomain(data);
      rangeX = [0, this.params.width - (this.params.margin.left + this.params.margin.right)];
      return this.params.scale().domain(domainX).range(rangeX);
    };

    Filter.prototype._getDomain = function(data) {
      var max;
      max = _.max(_.pluck(data, "value"));
      return [0, max];
    };

    Filter.prototype.update = function(data) {
      var self;
      self = this;
      this.data = data;
      return this.scaleX = this._getScaleX();
    };

    return Filter;

  })(APP.charts['Chart']);

  APP.charts['Filter'] = Filter;

}).call(this);
