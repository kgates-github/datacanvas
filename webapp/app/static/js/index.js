// Generated by CoffeeScript 1.9.0
(function() {
  var App, config, helpers;

  helpers = {
    getColor: function(value, qualitative) {
      var setting, _i, _len;
      if (value == null) {
        value = Infinity;
      }
      if (qualitative == null) {
        qualitative = [];
      }
      for (_i = 0, _len = qualitative.length; _i < _len; _i++) {
        setting = qualitative[_i];
        if (value <= setting.value) {
          return setting.color;
        }
      }
      return false;
    },
    aqiQualitative: [
      {
        name: 'Good',
        color: '#33cc33',
        lower: 0,
        value: 50
      }, {
        name: 'Moderate',
        color: '#eebb00',
        lower: 51,
        value: 100
      }, {
        name: 'Mildly unhealthy',
        color: 'rgb(255, 126, 0)',
        lower: 101,
        value: 150
      }, {
        name: 'Unhealthy',
        color: '#cc0000',
        lower: 151,
        value: 200
      }, {
        name: 'Very unhealthy',
        color: 'rgb(153, 0, 76)',
        lower: 201,
        value: 300
      }, {
        name: 'Hazardous',
        color: 'rgb(126, 0, 35)',
        lower: 301,
        value: 500
      }
    ]
  };

  config = {
    charts: [
      {
        type: 'ClockChart',
        params: {
          el: 'intro-viz',
          chart: 'circle',
          dimension: 'none',
          scale: d3.scale.linear,
          width: 970,
          height: 530,
          qualitative: helpers.aqiQualitative,
          margin: {
            top: 0,
            right: 10,
            bottom: 10,
            left: 5
          }
        }
      }
    ]
  };


  /*
  {
    type: 'CircleChart'
    params:
      el: 'intro-viz'
      chart: 'circle'
      dimension: 'none'
      scale: d3.scale.linear
      width: 970
      height: 530
      qualitative: helpers.aqiQualitative
      margin: 
        top: 0
        right: 10
        bottom: 10
        left: 5
  }
   */

  App = (function() {
    function App(_at_config, _at_data, helpers) {
      var chart, _i, _len, _ref;
      this.config = _at_config;
      this.data = _at_data;
      this.charts = [];
      this.filterChart;
      _ref = this.config.charts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chart = _ref[_i];
        this.charts.push(new APP.charts[chart.type](this, chart.params, this.data, helpers));
      }
    }

    App.prototype.update = function(_at_data) {
      var chart, data, _i, _len, _ref, _results;
      this.data = _at_data;
      _ref = this.charts;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chart = _ref[_i];
        data = _.findWhere(this.data, {
          dimension: chart.params.dimension,
          chart: chart.params.chart
        });
        _results.push(chart.update(data));
      }
      return _results;
    };

    return App;

  })();

  this.app = new App(config, data, helpers);

}).call(this);
